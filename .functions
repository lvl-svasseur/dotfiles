# Simple calculator
function calc() {
	local result=""
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//'   # remove trailing zeros
	else
		printf "$result"
	fi
	printf "\n"
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en1)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	echo # newline
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
	local text
	if [ -t 0 ]; then # argument
		text="$1"
	else # pipe
		text=$(cat)
	fi
	body=$(echo "$text" | sed -E 's|$|<br>|g')
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$text", body:"$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine() {
	for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
		xattr -r -d "$attribute" "$@"
	done
}

# ---------------------------------------------------
# Personnal functions

tag_release()
{
    local projectName="$1"
    local tagName="$2" 
    local previousTagName="$3"
    # || "release_RC-12Q4-S13_01.02"

    local svnRootLegacy="https://svn-c.internal.canoe.com/svn/projects/rc/"
    local svnRootRefonte="https://vc.in.canoe.com/svn/projects/rc/"
    
    local trunkUrl= "{$svnRootRefonte}website/trunk"
    local tagUrl=""

    local deployRoot="https://apps.internal.canoe.com/"

	case $projectName in
    	"rcr_admin")
            
			$tagUrl="{$svnRootRefonte}admin/tags/{$tagName}"
			$pTagUrl= "{$svnRootRefonte}admin/tags/{$previousTagName}"
			$deployUrl="{$deployRoot}rcr_admin/staging/deployment/new/"
            echo "create tag for rcr_admin"
			;;
		"rcr")
			
			trunkUrl= $svnRootRefonte"website/trunk"
			tagUrl=$svnRootRefonte"website/tags/"$tagName
			pTagUrl=$svnRootRefonte"website/tags/"$previousTagName
			deployUrl=$deployRoot"rcr/staging/deployment/new/"
            echo "create tag for rcr"
			;;
		"rc_admin")
			$tagUrl= $svnRootLegacy"admin/tags/"$tagName
			$pTagUrl= $svnRootLegacy"admin/tags/"$previousTagName
			$deployUrl= $deployRoot"rc_admin/staging/deployment/new/"
			;;
		"rc_ecom")
			$tagUrl= $svnRootLegacy"ecom/tags/"$tagName
			$pTagUrl= $svnRootLegacy"ecom/tags/"$previousTagName
			;;
		"rc_rest")
			$tagUrl= $svnRootLegacy"rest/tags/"$tagName
			$pTagUrl= $svnRootLegacy"rest/tags/"$previousTagName
			;;
		"rc_frontend")
                	$tagUrl= $svnRootLegacy"frontend/tags/"$tagName
			$pTagUrl= $svnRootLegacy"frontend/tags/"$previousTagName
			$deployUrl= $deployRoot"rc/staging/deployment/new/"
			;;
		"rc")
			trunkUrl= $svnRootLegacy"frontend/trunk"
			tagUrl= $svnRootLegacy"frontend/tags/"$tagName
			pTagUrl= $svnRootLegacy"frontend/tags/"$previousTagName
			deployUrl= $deployRoot"rc/staging/deployment/new/?application_id=15&ctx=staging&version="$tagName"&ACTION=Send"
			;;
		*)
			trunkUrl= $svnRootRefonte"frontend/trunk"
			tagUrl= $svnRootRefonte"website/tags"$tagName
			pTagUrl= $svnRootLegacy"website/tags/"$previousTagName
			deployUrl= $deployRoot"rc/staging/deployment/new/?application_id=15&ctx=staging&version="$tagName"&ACTION=Send"
			;;
	esac
	
	if [ ! -z $previousTagName ]
	  then
		echo "previous Tag is not null"
		revision=$(get_repo_revision $pTagUrl)
		echo "revision = $revision"
		export_release_svn_report $tagName $revison
	else
		echo "previous Tag is null"
		export_release_svn_report $tagName
	fi

	echo "create tag $tagName head:$revision from $trunkUrl to $tagUrl"
	# svn copy SRC $tagUrl -m "Creating tag $tagName head:$revision from $trunkUrl to $tagUrl"
	
	if [ ! -z $deployUrl ]
	  then
		echo "open browser to deploy"
		# xdg-open $deployUrl
	fi 
}

export_release_svn_report()
{
    if [ -z "$2" ]
      then
	grc --conf=conf.svn svn log -vl 20 | ansi2html --bg=dark > ./web/release/$1.html
    else
	grc --conf=conf.svn svn log -vr head:$2 | ansi2html --bg=dark > ./web/release/$1.html
    fi
}

svn_report()
{
    # depends on grc svn.conf
    if [ -z "$1" ]
      then
         grc --conf=conf.svn svn log -vl 20
    else
         grc --conf=conf.svn svn log -vr head:$1
    fi
}


get_repo_revision(){
    local url=$1
    eval "svn info $url | grep Revision | awk '{print $2}'"
    # echo $revision
}

copy_and_mkdir()
{
    local src=$1
    local target=$2

    if [ ! -d `dirname $target` ]
    then
        mkdir -m 755 -p $(dirname $target)
    fi
    cp -vRfp $src $target

    # exit 0
}

# Symfony2 project Harcore cache clearing
sym-refresh(){
    proj_root=$1
    if [ ! -d `dirname $proj_root` ]
    then
        $proj_root="."
    fi

    cd $proj_root
    app/console cache:clear
    sudo chmod -Rv 777 app/cache
    sudo chown dev1:dev1 -Rv app/cache
    sudo chmod -Rv 777 app/logs
    sudo chown dev1:dev1 -Rv app/logs
    # rm -rv ./web/static/css/
    # rm -rv ./web/static/js/
    # mkdir -v web/static/css
    # mkdir -v web/static/js
    sudo chown dev1:dev1 -Rv web/static
    sudo chmod 777 -Rv web/static
    # sudo php app/console assetic:dump --env=dev --no-debug
}



function hgrep {
   history | grep $1 
}

function openMateProject { mate //Users//stephanevasseur//Sites//$1//DEV/; }

function ursync {
        if ($1=="BLACKBOX") then
             rsync -urv /Users/stephanevasseur/Sites/* /Volumes/BLACKBOX/Projets/;
        else
             echo $1;
             # rsync -urv /Users/stephanevasseur/Sites/* /Volumes/BLACKBOX/Projets/
        fi
}

function start_pharmapar { 
	sites;
	cd pharmapar/DEV/pharmapar
	mate .
	bin/django syncdb;
	bin/django migrate;
	bin/django loadata page;
	bin/django runserver;
}

function colorpicker {
	# Show all the colours of the rainbow, should be run under bash
	for STYLE in 0 1 2 3 4 5 6 7; do
	  for FG in 30 31 32 33 34 35 36 37; do
	    for BG in 40 41 42 43 44 45 46 47; do
	      CTRL="\033[${STYLE};${FG};${BG}m"
	      echo -en "${CTRL}"
	      echo -n "${STYLE};${FG};${BG}"
	      echo -en "\033[0m"
	    done
	    echo ""
	  done
	  echo ""
	done
	# Reset
	echo -e "\033[0m"
}

# PYTHON PROJECT
function setup_python_mysqldb(){
  # cd /opt/local/var/run/mysql5/
  # cd MySQL-python-1.2.3
  DIRECTORY=$1
  # python setup.py install
  # sudo port install MySQL-python
  sudo port install MySQLDb
  sudo ln -s /usr/local/mysql/bin/* /usr/bin
  cd ${DIRECTORY}
  python setup.py install
  # which mysql_config5
  sudo ln -s /Applications/MAMP/tmp/mysql/mysql.sock /opt/local/var/run/mysql5/mysql.sock
  sudo ln -s /opt/local/bin/mysql_config5 /opt/local/bin/mysql_config
  python setup.py install
  echo "tcheck mysql is running"
  sudo /opt/local/share/mysql5/mysql/mysql.server start
  sudo mysqladmin5 -u root -p ping
}

# RUBY / RAILS ENVIRONMENT

# sudo ln -s /usr/bin/gem1.8   /usr/bin/gem
# sudo ln -s /usr/bin/gem1.8.8 /usr/bin/gem


# /etc/bashrc

# System wide functions and aliases
# Environment stuff goes in /etc/profile

# are we an interactive shell?
# if [ "$PS1" ]; then
#     if [ -x /usr/bin/tput ]; then
#       if [ "x`tput kbs`" != "x" ]; then 
# 	# We can't do this with "dumb" terminal
#         stty erase `tput kbs`
#       elif [ -x /usr/bin/wc ]; then
#         if [ "`tput kbs|wc -c `" -gt 0 ]; then 
# 	# We can't do this with "dumb" terminal
#           stty erase `tput kbs`
#         fi
#       fi
#     fi
#     case $TERM in
# 	xterm*)
# 	    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
# 	    ;;
# 	*)
# 	    ;;
#     esac
#     [ "$PS1" = "\\s-\\v\\\$ " ] && PS1="[\u@\h \W]\\$ "
#     
#     if [ "x$SHLVL" != "x1" ]; then # We're not a login shell
#         for i in /etc/profile.d/*.sh; do
# 	    if [ -x $i ]; then
# 	        . $i
# 	    fi
# 	done
#     fi
# fi



